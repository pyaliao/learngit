// 80. 删除有序数组中的重复项 II
// 给你一个有序数组 nums ，请你 原地 删除重复出现的元素，使每个元素 最多出现两次 ，返回删除后数组的新长度。
// 不要使用额外的数组空间，你必须在 原地 修改输入数组 并在使用 O(1) 额外空间的条件下完成。

// 说明：
// 为什么返回数值是整数，但输出的答案是数组呢？
// 请注意，输入数组是以「引用」方式传递的，这意味着在函数里修改输入数组对于调用者是可见的。

// 你可以想象内部操作如下:
// // nums 是以“引用”方式传递的。也就是说，不对实参做任何拷贝
// int len = removeDuplicates(nums);

// // 在函数里修改输入数组对于调用者是可见的。
// // 根据你的函数返回的长度, 它会打印出数组中 该长度范围内 的所有元素。
// for (int i = 0; i < len; i++) {
//   print(nums[i]);
// }

// 示例 1：
// 输入：nums = [1, 1, 1, 2, 2, 3]
// 输出：5, nums = [1, 1, 2, 2, 3]
// 解释：函数应返回新长度 length = 5, 并且原数组的前五个元素被修改为 1, 1, 2, 2, 3 。
// 不需要考虑数组中超出新长度后面的元素。

// 示例 2：
// 输入：nums = [0, 0, 1, 1, 1, 1, 2, 3, 3]
// 输出：7, nums = [0, 0, 1, 1, 2, 3, 3]
// 解释：函数应返回新长度 length = 7, 并且原数组的前五个元素被修改为 0, 0, 1, 1, 2, 3, 3 。 不需要考虑数组中超出新长度后面的元素。

// 提示：
// 1 <= nums.length <= 3 * 104
// -104 <= nums[i] <= 104
// nums 已按升序排列

// 双指针法
/**
 * @param {number[]} nums
 * @return {number}
 */
const removeDuplicates = function (nums) {
  // 维护两个数组，left维护的是合法的要返回的数组的长度
  // right维护的是已经检查过的数组的长度
  // 因此nums[right]表示第一个待检查的元素
  // nums[left - 1]表示上一个符合条件的（被保留的）元素移动到的位置

  const n = nums.length
  // 当数组长度小于2时，直接返回数组长度即可（无论是否重复都满足条件，不用处理即可返回）
  if (n <= 2) {
    return n
  }
  // 当数组长度大于2时，进行如下处理：
  // 因为长度不大于2的数组符合条件，因此检查过的数组都有效，将left及right都初始化为2
  let left = 2
  let right = 2
  // 此处小于n
  while (right < n) {
    // 判断当前待检查的元素是否与上上一个被保留的元素相同
    // 当前待检查的元素下标是right，上上一个元素下标left - 2

    // 1. 如果当前待检元素与上上一个元素不同，则将当前元素加入到left维护的数组中，
    // 然后将left右移，最后将right右移一位
    if (nums[right] !== nums[left - 2]) {
      nums[left] = nums[right]
      left++
    }
    // 2. 如果当前元素与上上一个元素相同，则说明上上一个元素，上一个元素和当前待检元素相同
    // 因此，忽略当前待检元素，right右移一位
    right++
  }
  return left
}

// const nums = [1, 1, 1, 2, 2, 3]
const nums = [0, 0, 1, 1, 1, 1, 2, 3, 3]
console.log(removeDuplicates(nums), nums.slice(0, removeDuplicates(nums)))
