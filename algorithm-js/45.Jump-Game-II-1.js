// 45. 跳跃游戏 II
// 给定一个非负整数数组，你最初位于数组的第一个位置。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度，注意可以不达到此长度，即跳跃的长度小于等于此长度。
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
// 假设你总是可以到达数组的最后一个位置。

// 示例 1:
// 输入: [2, 3, 1, 1, 4]
// 输出: 2
// 解释: 跳到最后一个位置的最小跳跃数是 2。
// 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

// 示例 2:
// 输入: [2, 3, 0, 1, 4]
// 输出: 2

// 提示:
// 1 <= nums.length <= 1000
// 0 <= nums[i] <= 105

// 这道题是典型的贪心算法，通过局部最优解得到全局最优解。
// 方法一与方法二都是使用贪心算法实现，只是贪心的策略不同。
// 方法一、反向查找出发位置
// 我们的目标是到达数组的最后一个位置，因此我们可以考虑最后一步跳跃前所在的位置，
// 该位置通过跳跃能够到达最后一个位置。如果有多个位置通过跳跃都能够到达最后一个位置，
// 那么我们应该如何进行选择呢？直观上来看，我们可以「贪心」地选择距离最后一个位置最远的那个位置，
// 也就是对应下标最小的那个位置。因此，我们可以从左到右遍历数组，选择第一个满足要求的位置。
// 找到最后一步跳跃前所在的位置之后，我们继续贪心地寻找倒数第二步跳跃前所在的位置，
// 以此类推，直到找到数组的开始位置。

// 时间复杂度：O(n^2)，其中n是数组长度。有两层嵌套循环，在最坏的情况下，
// 例如数组中的所有元素都是1，position需要遍历数组中的每个位置，
// 对于position的每个值都有一次循环。
// 空间复杂度：O(1)。

/**
 * @param {number[]} nums
 * @return {number}
 */
const jump = function (nums) {
  let position = nums.length - 1
  let steps = 0
  // position为0时，不需要处理，
  // 因为其本身要么初始时已经到达数组尾部或者
  // 经过内层循环一系列由远及近的处理到达数组首元素，并统计了步数
  while (position > 0) {
    // 因为寻找的是离position最远的那个元素，因此循环上界小于position
    for (let i = 0; i < position; i++) {
      // 如果找到离position最远的那个元素，则将position重置
      // 将步数加1，然后退出内层循环
      if (i + nums[i] >= position) {
        position = i
        steps++
        break
      }
    }
  }
  return steps
}
