// 45. 跳跃游戏 II
// 给定一个非负整数数组，你最初位于数组的第一个位置。
// 数组中的每个元素代表你在该位置可以跳跃的最大长度，注意可以不达到此长度，即跳跃的长度小于等于此长度。
// 你的目标是使用最少的跳跃次数到达数组的最后一个位置。
// 假设你总是可以到达数组的最后一个位置。

// 示例 1:
// 输入: [2, 3, 1, 1, 4]
// 输出: 2
// 解释: 跳到最后一个位置的最小跳跃数是 2。
// 从下标为 0 跳到下标为 1 的位置，跳 1 步，然后跳 3 步到达数组的最后一个位置。

// 示例 2:
// 输入: [2, 3, 0, 1, 4]
// 输出: 2

// 提示:
// 1 <= nums.length <= 1000
// 0 <= nums[i] <= 105

// 这道题是典型的贪心算法，通过局部最优解得到全局最优解。
// 方法一与方法二都是使用贪心算法实现，只是贪心的策略不同。
// 方法二、正向查找可到达的最大位置
// 方法一虽然直观，但是时间复杂度比较高，有没有办法降低时间复杂度呢？
// 如果我们「贪心」地进行正向查找，每次找到可到达的最远位置，
// 就可以在线性时间内得到最少的跳跃次数。例如，对于数组[2, 3, 1, 2, 4, 2, 3]，
// 初始位置是下标0，从下标0出发，最远可到达下标2。下标 0 可到达的位置中，
// 下标1的值是3，从下标1出发可以达到更远的位置，因此第一步到达下标1。
// 从下标1出发，最远可到达下标4。下标1可到达的位置中，下标4的值是4，
// 从下标4出发可以达到更远的位置，因此第二步到达下标4。
// 在具体的实现中，我们维护当前能够到达的最大下标位置，记为边界。
// 我们从左到右遍历数组，到达边界时，更新边界并将跳跃次数增加1。
// 在遍历数组时，我们不访问最后一个元素，这是因为在访问最后一个元素之前，
// 我们的边界一定大于等于最后一个位置，否则就无法跳到最后一个位置了。
// 如果访问最后一个元素，在边界正好为最后一个位置的情况下，
// 我们会增加一次「不必要的跳跃次数」，因此我们不必访问最后一个元素。

// 时间复杂度：O(n)，其中n是数组长度。
// 空间复杂度：O(1)。
/**
 * @param {number[]} nums
 * @return {number}
 */
const jump = function (nums) {
  let maxPosition = 0
  let step = 0
  let end = maxPosition
  let len = nums.length
  // i < len - 1，不必遍历最后一个元素，因为在到达最后一个元素之前
  // 肯定有一个元素可以到达最后一个元素
  for (let i = 0; i < len - 1; i++) {
    // 获取当前元素可以达到的最远距离
    maxPosition = Math.max(maxPosition, i + nums[i])
    // 判断是否到的边界，到达边界则更新边界，并将步数加1
    if (i === end) {
      end = maxPosition
      step++
    }
  }
  return step
}
