// 62. 不同路径
// 一个机器人位于一个 m x n 网格的左上角（起始点在下图中标记为 “Start” ）。
// 机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。
// 问总共有多少条不同的路径？

// 示例 1：
// 输入：m = 3, n = 7
// 输出：28

// 示例 2：
// 输入：m = 3, n = 2
// 输出：3
// 解释：
// 从左上角开始，总共有 3 条路径可以到达右下角。
// 1. 向右 -> 向下 -> 向下
// 2. 向下 -> 向下 -> 向右
// 3. 向下 -> 向右 -> 向下

// 示例 3：
// 输入：m = 7, n = 3
// 输出：28

// 示例 4：
// 输入：m = 3, n = 3
// 输出：6

// 提示：
// 1 <= m, n <= 100
// 题目数据保证答案小于等于 2 * 109

// 动态规划
// 用f(i, j)表示从左上角走到(i, j)的路径数量，其中i表示垂直方向，j表示水平方向
// i的范围是[0, m)，j的范围是[0, n)。因为下标是从0开始的，所以此处跟随下标。
// 由于我们每一次只能向右或者向下移动一步，因此想要走到(i, j)，
// 只能是从(i - 1, j)往下走一步，或者从(i, j - 1)往右走一步
// 因此动态方程为:
// f(i, j) = f(i, j - 1) + f(i - 1, j)   i >= 1, j >= 1
// f(i, j) = 1                           i = 0, j = 0 (从左上角到左上角只有一种走法)
// f(i, j) = 1                           i = 0 && j >= 1, j = 0 && i >= 1 (两条边界，从左上角去到两条边界任意一点都只有一条路径)
// 最终的结果就是f(m - 1, n - 1)的值
// 数据结构处理：将方程每个坐标对应的值存储到一个二维数组中
/**
 * @param {number} m
 * @param {number} n
 * @return {number}
 */
const uniquePaths = function (m, n) {
  // 初始化二维数组
  const path = new Array(m).fill(new Array(n))
  // 从左上角去两条边界的任何一点，都是只有一条路径
  // 因此初始化边界为1
  for (let i = 0; i < m; i++) {
    path[i][0] = 1
  }
  for (let i = 0; i < n; i++) {
    path[0][i] = 1
  }
  for (let i = 1; i < m; i++) {
    for (let j = 1; j < n; j++) {
      path[i][j] = path[i - 1][j] + path[i][j - 1]
    }
  }
  return path[m - 1][n - 1]
}

console.log(uniquePaths(3, 7))
