// 78. 子集
// 给你一个整数数组 nums ，数组中的元素 互不相同 。
// 返回该数组所有可能的子集（幂集）。
// 解集 不能 包含重复的子集。你可以按 任意顺序 返回解集。

// 示例 1：
// 输入：nums = [1, 2, 3]
// 输出：[[], [1], [2], [1, 2], [3], [1, 3], [2, 3], [1, 2, 3]]

// 示例 2：
// 输入：nums = [0]
// 输出：[[], [0]]

// 提示：
// 1 <= nums.length <= 10
// - 10 <= nums[i] <= 10``
// nums 中的所有元素 互不相同

// 迭代法求解
// 思路与算法
// 记原序列中元素的总数为 n。原序列中的每个数字ai的状态可能有两种，即「在子集中」和「不在子集中」。
// 我们用 1 表示「在子集中」，0 表示不在子集中，那么每一个子集可以对应一个长度为 n 的 0/1 序列，
// 第 i 位表示 ai 是否在子集中。

// 例如，n = 3，a = {5, 2, 9} 时：
// 0/1序列    子集          0/1序列对应的二进制数
// 000000    {}                    0
// 001001    {9}                   1
// 010010    {2}                   2
// 011011    {2, 9}                3
// 100100    {5}                   4
// 101101    {5, 9}                5
// 110110    {5, 2}                6
// 111111    {5, 2, 9}             7

// 可以发现0/1序列对应的二进制数正好从 0 到 2^n-1。我们可以枚举 mask ∈ [0, 2^n − 1]，
// mask 的二进制表示是一个 0/1 序列，我们可以按照这个 0/1 序列在原集合当中取数。
// 当我们枚举完所有 2^n 个mask，我们也就能构造出所有的子集。

const subsets = function (nums) {
  const n = nums.length
  const ans = []
  // 遍历[0, 2^n - 1]
  for (let ele = 0; ele < (1 << n); ele++) {
    const tmp = []
    // 每一个被遍历的ele都是一种组合（其二进制位0表示不选择，1表示选择），
    // 将其与1, 2, 4, 8,..., 2^(N-1)按位与，可以求得所有为1的位的下标
    // 每个下标对应nums中的一个元素，这样就可以求得所有的子集组合
    for (let j = 0; j < n; j++) {
      if (ele & (1 << j)) {
        tmp.push(nums[j])
      }
    }
    ans.push(tmp)
  }
  return ans
}
const nums = [1, 2, 3]
console.log(subsets(nums))
