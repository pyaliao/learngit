// 50. Pow(x, n)
// 实现pow(x, n)，即计算x的n次幂函数（即，x^n）。

// 示例 1：
// 输入：x = 2.00000, n = 10
// 输出：1024.00000

// 示例 2：
// 输入：x = 2.10000, n = 3
// 输出：9.26100

// 示例 3：
// 输入：x = 2.00000, n = -2
// 输出：0.25000
// 解释：2 - 2 = 1 / 22 = 1 / 4 = 0.25

// 提示：
// -100.0 < x < 100.0
// -2^31 <= n <= 2^31 - 1
// -10^4 <= x^n <= 10^4

// 二、快速幂递归
// 本题的方法被称为「快速幂算法」，有递归和迭代两个版本。
// 这篇题解会从递归版本的开始讲起，再逐步引出迭代的版本。

// 当指数n为负数时，我们可以计算 x^(-n)
// 再取倒数得到结果，因此我们只需要考虑n为自然数的情况。

// 方法一：快速幂 + 迭代

/**
 * @param {number} x
 * @param {number} n
 * @return {number}
 */

const myPow = function (x, n) {
  
}
