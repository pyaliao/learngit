// 36. 有效的数独
// 请你判断一个9x9的数独是否有效。只需要 根据以下规则 ，验证已经填入的数字是否有效即可。
// 数字 1-9 在每一行只能出现一次。
// 数字 1-9 在每一列只能出现一次。
// 数字 1-9 在每一个以粗实线分隔的 3x3 宫内只能出现一次。（请参考示例图）
// 数独部分空格内已填入了数字，空白格用 '.' 表示。

// 注意：
// 一个有效的数独（部分已被填充）不一定是可解的。
// 只需要根据以上规则，验证已经填入的数字是否有效即可。

// 示例 1：
// 输入：board =
//   [["5", "3", ".", ".", "7", ".", ".", ".", "."]
//     , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
//     , [".", "9", "8", ".", ".", ".", ".", "6", "."]
//     , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
//     , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
//     , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
//     , [".", "6", ".", ".", ".", ".", "2", "8", "."]
//     , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
//     , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
// 输出：true

// 示例 2：
// 输入：board =
//   [["8", "3", ".", ".", "7", ".", ".", ".", "."]
//     , ["6", ".", ".", "1", "9", "5", ".", ".", "."]
//     , [".", "9", "8", ".", ".", ".", ".", "6", "."]
//     , ["8", ".", ".", ".", "6", ".", ".", ".", "3"]
//     , ["4", ".", ".", "8", ".", "3", ".", ".", "1"]
//     , ["7", ".", ".", ".", "2", ".", ".", ".", "6"]
//     , [".", "6", ".", ".", ".", ".", "2", "8", "."]
//     , [".", ".", ".", "4", "1", "9", ".", ".", "5"]
//     , [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
// 输出：false

// 解释：除了第一行的第一个数字从 5 改为 8 以外，空格内其他数字均与 示例1 相同。 
// 但由于位于左上角的 3x3 宫内有两个 8 存在, 因此这个数独是无效的。

// 提示：
// board.length == 9
// board[i].length == 9
// board[i][j]是一位数字或者'.'

/**
 * @param {character[][]} board
 * @return {boolean}
 */
const isValidSudoku = function (board) {
  // 创建哈希表数组，rows存储每一行的哈希表
  // columns存储每一列的哈希表，boxes存储子数独的哈希表
  const rows = []
  const columns = []
  const boxes = []
  for (let index = 0; index < 9; index++) {
    rows[index] = new Map()
    columns[index] = new Map()
    boxes[index] = new Map()
  }
  for (let i = 0; i < 9; i++) {
    for (let j = 0; j < 9; j++) {
      // 遍历，判断字符是否等于'.'，不等于则进行进一步处理
      if (board[i][j] !== '.') {
        // 获取当前元素并将其转为整数
        const number = parseInt(board[i][j])
        // 计算子数独的下标
        const boxIndex = parseInt(i / 3) * 3 + parseInt(j / 3)
        // 如果当前第i行的哈希表中，number不存在，则将其存储到此哈希表中，值置为1
        // 如果存在，则将其值加一后重新存储到此哈希表
        if (!rows[i].get(number)) {
          rows[i].set(number, 1)
        } else {
          rows[i].set(number, rows[i].get(number) + 1)
        }
        // 如果当前第j行的哈希表中，number不存在，则将其存储到此哈希表中，值置为1
        // 如果存在，则将其值加一后重新存储到此哈希表
        if (!columns[j].get(number)) {
          columns[j].set(number, 1)
        } else {
          columns[j].set(number, columns[j].get(number) + 1)
        }
        // 如果当前第boxIndex个子数独的哈希表中，number不存在，则将其存储到此哈希表中，值置为1
        // 如果存在，则将其值加一后重新存储到此哈希表
        if (!boxes[boxIndex].get(number)) {
          boxes[boxIndex].set(number, 1)
        } else {
          boxes[boxIndex].set(number, boxes[boxIndex].get(number) + 1)
        }
        // 在更新了当前遍历到的行、列与子数独对应的哈希表之后
        // 判断当前number对应的值是否大于1，大于1则说明数独无效，直接返回false
        if (rows[i].get(number) > 1 || columns[j].get(number) > 1 || boxes[boxIndex].get(number) > 1) {
          return false
        }
      }
    }
  }
  // 如果循环结束也没有退出函数，则说明数独有效，直接返回true
  return true
}
const board = [["5", "3", ".", ".", "7", ".", ".", ".", "."],
               ["6", ".", ".", "1", "9", "5", ".", ".", "."],
               [".", "9", "8", ".", ".", ".", ".", "6", "."],
               ["8", ".", ".", ".", "6", ".", ".", ".", "3"],
               ["4", ".", ".", "8", ".", "3", ".", ".", "1"],
               ["7", ".", ".", ".", "2", ".", ".", ".", "6"],
               [".", "6", ".", ".", ".", ".", "2", "8", "."],
               [".", ".", ".", "4", "1", "9", ".", ".", "5"],
               [".", ".", ".", ".", "8", ".", ".", "7", "9"]]
console.log(isValidSudoku(board))
